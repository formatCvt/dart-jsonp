// Auto-generated from example.html.
// DO NOT EDIT.

library example_html;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import 'package:web_ui/web_ui.dart';
import 'package:jsonp/jsonp.dart' as jsonp;
import 'package:js/js.dart' as js;


// Original code


/**
 * Wraps up the user details in a nice class. For the moment only the name and
 * image are displayed.
 */
class User {
  final String imageUrl;
  final String name;

  User(this.imageUrl, this.name);
  User.fromProxy(var data) :
    imageUrl = data.profile_image_url,
    name = data.name;
}

/**
 * An individual tweet. The tweet tracks the user that made it, so this could
 * handle conversations.
 */
class Tweet {
  final User user;
  final String tweet;
  final String timestamp;

  Tweet(this.user, this.tweet, this.timestamp);
  Tweet.fromProxy(var data) :
    user = new User.fromProxy(data.user),
    tweet = data.text,
    timestamp = data.created_at;
}

/**
 * Every response from the Twitter JSONP API is a list, because usually you
 * would want multiple tweets at once. If it returned one at a time, then the
 * Tweet class could be directly created by the jsonp library.
 */
List<Tweet> listFromProxy(js.Proxy data) {
  List<Tweet> result;

  result = new List<Tweet>();

  // Unfortunately, the proxy object is unable to be correctly inspected,
  // leading to warnings about non existant properties. This is because the
  // content of it is determined by the javascript code.
  for (var i = 0;i < data.length;i++) {
    result.add(new Tweet.fromProxy(data[i]));
  }

  return result;
}

/**
 * Could do a lot of things, but just adds the tweet to the observable list.
 */
void handleTweet(Tweet tweet) {
  tweets.add(tweet);
}

// The twitter feed to follow. Try out different ones (you can check them in
// your browser).
var _seth_ladd = 'https://twitter.com/status/user_timeline/sethladd?format=json&callback=?';

// The list of tweets to display.
final __changes = new __observe.Observable();

List<Tweet> __$tweets = toObservable([]);
List<Tweet> get tweets {
  if (__observe.observeReads) {
    __observe.notifyRead(__changes, __observe.ChangeRecord.FIELD, 'tweets');
  }
  return __$tweets;
}
set tweets(List<Tweet> value) {
  if (__observe.hasObservers(__changes)) {
    __observe.notifyChange(__changes, __observe.ChangeRecord.FIELD, 'tweets',
        __$tweets, value);
  }
  __$tweets = value;
}

// Current page, which assumes a count of 1, so really this is the current
// tweet.
var page = 1;

/**
 * Makes a request for a single tweet using a one time request.
 */
void request() {
  jsonp.fetch(uri: "${_seth_ladd}&count=1&page=${page}")
    .then((js.Proxy data) => listFromProxy(data).forEach(handleTweet));
  page += 1;
}

var stream = 'tweet';

/**
 * Requests 10 tweets at once. The stream handler is set up in [main()] and
 * will just add each tweet to the list as it is received.
 */
void request10() {
  for (int i = 0;i < 10;i++) {
    jsonp.fetchMany(stream, uri: "${_seth_ladd}&count=1&page=${page}");
    page += 1;
  }
}

/**
 * Configures the stream handler which is triggered by the [request10] method.
 * Each stream should be configured in this way one time only, otherwise you
 * will have methods being invoked multiple times.
 */
void main () {
  jsonp.fetchMany(stream).expand(listFromProxy).forEach(handleTweet);
}

// Additional generated code
void init_autogenerated() {
  var __root = autogenerated.webUIRoot;
  final __html0 = new autogenerated.Element.html('<div class="row">\n                        <div class="span2">\n                            <img class="tweet-user-img img-rounded">\n                            <p class="tweet-user-name"></p>\n                        </div>\n                        <div class="span8">\n                            <div class="text-center well"></div>\n                        </div>\n                    </div>', treeSanitizer: autogenerated.nullTreeSanitizer);
  var __e0, __e1, __e8;
  var __t = new autogenerated.Template(__root);
  __e0 = __root.nodes[1].nodes[1].nodes[3].nodes[1].nodes[0];
  __t.listen(__e0.onClick, ($event) { request(); });
  __e1 = __root.nodes[1].nodes[1].nodes[5].nodes[1].nodes[0];
  __t.listen(__e1.onClick, ($event) { request10(); });
  __e8 = __root.nodes[1].nodes[5].nodes[1];
  __t.loop(__e8, () => tweets, ($list, $index, __t) {
    var tweet = $list[$index];
    var __e2, __e4, __e6, __e7;
    __e7 = __html0.clone(true);
    __e2 = __e7.nodes[1].nodes[1];
    __t.oneWayBind(() =>  tweet.user.imageUrl , (e) { if (__e2.src != e) __e2.src = e; }, false, true);
    __e4 = __e7.nodes[1].nodes[3];
    var __binding3 = __t.contentBind(() =>  tweet.user.name , false);
    __e4.nodes.add(__binding3);
    __e6 = __e7.nodes[3].nodes[1];
    var __binding5 = __t.contentBind(() =>  tweet.tweet , false);
    __e6.nodes.addAll([new autogenerated.Text('\n                                '),
        __binding5,
        new autogenerated.Text('\n                            ')]);
  __t.addAll([new autogenerated.Text('\n                    '),
      __e7,
      new autogenerated.Text('\n                ')]);
  });
  __t.create();
  __t.insert();
}

//# sourceMappingURL=example.dart.map